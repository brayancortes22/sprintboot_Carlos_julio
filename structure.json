{
  "back-end": {
    "sprint-boot": {
      ".env": "",
      ".gitattributes": "/mvnw text eol=lf\r\n*.cmd text eol=crlf\r\n",
      ".gitignore": "HELP.md\r\ntarget/\r\n!.mvn/wrapper/maven-wrapper.jar\r\n!**/src/main/**/target/\r\n!**/src/test/**/target/\r\n\r\n### STS ###\r\n.apt_generated\r\n.classpath\r\n.factorypath\r\n.project\r\n.settings\r\n.springBeans\r\n.sts4-cache\r\n\r\n### IntelliJ IDEA ###\r\n.idea\r\n*.iws\r\n*.iml\r\n*.ipr\r\n\r\n### NetBeans ###\r\n/nbproject/private/\r\n/nbbuild/\r\n/dist/\r\n/nbdist/\r\n/.nb-gradle/\r\nbuild/\r\n!**/src/main/**/build/\r\n!**/src/test/**/build/\r\n\r\n### VS Code ###\r\n.vscode/\r\n",
      ".mvn": {
        "wrapper": {
          "maven-wrapper.properties": "# Licensed to the Apache Software Foundation (ASF) under one\r\n# or more contributor license agreements.  See the NOTICE file\r\n# distributed with this work for additional information\r\n# regarding copyright ownership.  The ASF licenses this file\r\n# to you under the Apache License, Version 2.0 (the\r\n# \"License\"); you may not use this file except in compliance\r\n# with the License.  You may obtain a copy of the License at\r\n#\r\n#   http://www.apache.org/licenses/LICENSE-2.0\r\n#\r\n# Unless required by applicable law or agreed to in writing,\r\n# software distributed under the License is distributed on an\r\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n# KIND, either express or implied.  See the License for the\r\n# specific language governing permissions and limitations\r\n# under the License.\r\nwrapperVersion=3.3.2\r\ndistributionType=only-script\r\ndistributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.9/apache-maven-3.9.9-bin.zip\r\n"
        }
      },
      "mvnw": "#!/bin/sh\n# ----------------------------------------------------------------------------\n# Licensed to the Apache Software Foundation (ASF) under one\n# or more contributor license agreements.  See the NOTICE file\n# distributed with this work for additional information\n# regarding copyright ownership.  The ASF licenses this file\n# to you under the Apache License, Version 2.0 (the\n# \"License\"); you may not use this file except in compliance\n# with the License.  You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing,\n# software distributed under the License is distributed on an\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n# KIND, either express or implied.  See the License for the\n# specific language governing permissions and limitations\n# under the License.\n# ----------------------------------------------------------------------------\n\n# ----------------------------------------------------------------------------\n# Apache Maven Wrapper startup batch script, version 3.3.2\n#\n# Optional ENV vars\n# -----------------\n#   JAVA_HOME - location of a JDK home dir, required when download maven via java source\n#   MVNW_REPOURL - repo url base for downloading maven distribution\n#   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven\n#   MVNW_VERBOSE - true: enable verbose log; debug: trace the mvnw script; others: silence the output\n# ----------------------------------------------------------------------------\n\nset -euf\n[ \"${MVNW_VERBOSE-}\" != debug ] || set -x\n\n# OS specific support.\nnative_path() { printf %s\\\\n \"$1\"; }\ncase \"$(uname)\" in\nCYGWIN* | MINGW*)\n  [ -z \"${JAVA_HOME-}\" ] || JAVA_HOME=\"$(cygpath --unix \"$JAVA_HOME\")\"\n  native_path() { cygpath --path --windows \"$1\"; }\n  ;;\nesac\n\n# set JAVACMD and JAVACCMD\nset_java_home() {\n  # For Cygwin and MinGW, ensure paths are in Unix format before anything is touched\n  if [ -n \"${JAVA_HOME-}\" ]; then\n    if [ -x \"$JAVA_HOME/jre/sh/java\" ]; then\n      # IBM's JDK on AIX uses strange locations for the executables\n      JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n      JAVACCMD=\"$JAVA_HOME/jre/sh/javac\"\n    else\n      JAVACMD=\"$JAVA_HOME/bin/java\"\n      JAVACCMD=\"$JAVA_HOME/bin/javac\"\n\n      if [ ! -x \"$JAVACMD\" ] || [ ! -x \"$JAVACCMD\" ]; then\n        echo \"The JAVA_HOME environment variable is not defined correctly, so mvnw cannot run.\" >&2\n        echo \"JAVA_HOME is set to \\\"$JAVA_HOME\\\", but \\\"\\$JAVA_HOME/bin/java\\\" or \\\"\\$JAVA_HOME/bin/javac\\\" does not exist.\" >&2\n        return 1\n      fi\n    fi\n  else\n    JAVACMD=\"$(\n      'set' +e\n      'unset' -f command 2>/dev/null\n      'command' -v java\n    )\" || :\n    JAVACCMD=\"$(\n      'set' +e\n      'unset' -f command 2>/dev/null\n      'command' -v javac\n    )\" || :\n\n    if [ ! -x \"${JAVACMD-}\" ] || [ ! -x \"${JAVACCMD-}\" ]; then\n      echo \"The java/javac command does not exist in PATH nor is JAVA_HOME set, so mvnw cannot run.\" >&2\n      return 1\n    fi\n  fi\n}\n\n# hash string like Java String::hashCode\nhash_string() {\n  str=\"${1:-}\" h=0\n  while [ -n \"$str\" ]; do\n    char=\"${str%\"${str#?}\"}\"\n    h=$(((h * 31 + $(LC_CTYPE=C printf %d \"'$char\")) % 4294967296))\n    str=\"${str#?}\"\n  done\n  printf %x\\\\n $h\n}\n\nverbose() { :; }\n[ \"${MVNW_VERBOSE-}\" != true ] || verbose() { printf %s\\\\n \"${1-}\"; }\n\ndie() {\n  printf %s\\\\n \"$1\" >&2\n  exit 1\n}\n\ntrim() {\n  # MWRAPPER-139:\n  #   Trims trailing and leading whitespace, carriage returns, tabs, and linefeeds.\n  #   Needed for removing poorly interpreted newline sequences when running in more\n  #   exotic environments such as mingw bash on Windows.\n  printf \"%s\" \"${1}\" | tr -d '[:space:]'\n}\n\n# parse distributionUrl and optional distributionSha256Sum, requires .mvn/wrapper/maven-wrapper.properties\nwhile IFS=\"=\" read -r key value; do\n  case \"${key-}\" in\n  distributionUrl) distributionUrl=$(trim \"${value-}\") ;;\n  distributionSha256Sum) distributionSha256Sum=$(trim \"${value-}\") ;;\n  esac\ndone <\"${0%/*}/.mvn/wrapper/maven-wrapper.properties\"\n[ -n \"${distributionUrl-}\" ] || die \"cannot read distributionUrl property in ${0%/*}/.mvn/wrapper/maven-wrapper.properties\"\n\ncase \"${distributionUrl##*/}\" in\nmaven-mvnd-*bin.*)\n  MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/\n  case \"${PROCESSOR_ARCHITECTURE-}${PROCESSOR_ARCHITEW6432-}:$(uname -a)\" in\n  *AMD64:CYGWIN* | *AMD64:MINGW*) distributionPlatform=windows-amd64 ;;\n  :Darwin*x86_64) distributionPlatform=darwin-amd64 ;;\n  :Darwin*arm64) distributionPlatform=darwin-aarch64 ;;\n  :Linux*x86_64*) distributionPlatform=linux-amd64 ;;\n  *)\n    echo \"Cannot detect native platform for mvnd on $(uname)-$(uname -m), use pure java version\" >&2\n    distributionPlatform=linux-amd64\n    ;;\n  esac\n  distributionUrl=\"${distributionUrl%-bin.*}-$distributionPlatform.zip\"\n  ;;\nmaven-mvnd-*) MVN_CMD=mvnd.sh _MVNW_REPO_PATTERN=/maven/mvnd/ ;;\n*) MVN_CMD=\"mvn${0##*/mvnw}\" _MVNW_REPO_PATTERN=/org/apache/maven/ ;;\nesac\n\n# apply MVNW_REPOURL and calculate MAVEN_HOME\n# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>\n[ -z \"${MVNW_REPOURL-}\" ] || distributionUrl=\"$MVNW_REPOURL$_MVNW_REPO_PATTERN${distributionUrl#*\"$_MVNW_REPO_PATTERN\"}\"\ndistributionUrlName=\"${distributionUrl##*/}\"\ndistributionUrlNameMain=\"${distributionUrlName%.*}\"\ndistributionUrlNameMain=\"${distributionUrlNameMain%-bin}\"\nMAVEN_USER_HOME=\"${MAVEN_USER_HOME:-${HOME}/.m2}\"\nMAVEN_HOME=\"${MAVEN_USER_HOME}/wrapper/dists/${distributionUrlNameMain-}/$(hash_string \"$distributionUrl\")\"\n\nexec_maven() {\n  unset MVNW_VERBOSE MVNW_USERNAME MVNW_PASSWORD MVNW_REPOURL || :\n  exec \"$MAVEN_HOME/bin/$MVN_CMD\" \"$@\" || die \"cannot exec $MAVEN_HOME/bin/$MVN_CMD\"\n}\n\nif [ -d \"$MAVEN_HOME\" ]; then\n  verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"\n  exec_maven \"$@\"\nfi\n\ncase \"${distributionUrl-}\" in\n*?-bin.zip | *?maven-mvnd-?*-?*.zip) ;;\n*) die \"distributionUrl is not valid, must match *-bin.zip or maven-mvnd-*.zip, but found '${distributionUrl-}'\" ;;\nesac\n\n# prepare tmp dir\nif TMP_DOWNLOAD_DIR=\"$(mktemp -d)\" && [ -d \"$TMP_DOWNLOAD_DIR\" ]; then\n  clean() { rm -rf -- \"$TMP_DOWNLOAD_DIR\"; }\n  trap clean HUP INT TERM EXIT\nelse\n  die \"cannot create temp dir\"\nfi\n\nmkdir -p -- \"${MAVEN_HOME%/*}\"\n\n# Download and Install Apache Maven\nverbose \"Couldn't find MAVEN_HOME, downloading and installing it ...\"\nverbose \"Downloading from: $distributionUrl\"\nverbose \"Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName\"\n\n# select .zip or .tar.gz\nif ! command -v unzip >/dev/null; then\n  distributionUrl=\"${distributionUrl%.zip}.tar.gz\"\n  distributionUrlName=\"${distributionUrl##*/}\"\nfi\n\n# verbose opt\n__MVNW_QUIET_WGET=--quiet __MVNW_QUIET_CURL=--silent __MVNW_QUIET_UNZIP=-q __MVNW_QUIET_TAR=''\n[ \"${MVNW_VERBOSE-}\" != true ] || __MVNW_QUIET_WGET='' __MVNW_QUIET_CURL='' __MVNW_QUIET_UNZIP='' __MVNW_QUIET_TAR=v\n\n# normalize http auth\ncase \"${MVNW_PASSWORD:+has-password}\" in\n'') MVNW_USERNAME='' MVNW_PASSWORD='' ;;\nhas-password) [ -n \"${MVNW_USERNAME-}\" ] || MVNW_USERNAME='' MVNW_PASSWORD='' ;;\nesac\n\nif [ -z \"${MVNW_USERNAME-}\" ] && command -v wget >/dev/null; then\n  verbose \"Found wget ... using wget\"\n  wget ${__MVNW_QUIET_WGET:+\"$__MVNW_QUIET_WGET\"} \"$distributionUrl\" -O \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" || die \"wget: Failed to fetch $distributionUrl\"\nelif [ -z \"${MVNW_USERNAME-}\" ] && command -v curl >/dev/null; then\n  verbose \"Found curl ... using curl\"\n  curl ${__MVNW_QUIET_CURL:+\"$__MVNW_QUIET_CURL\"} -f -L -o \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" \"$distributionUrl\" || die \"curl: Failed to fetch $distributionUrl\"\nelif set_java_home; then\n  verbose \"Falling back to use Java to download\"\n  javaSource=\"$TMP_DOWNLOAD_DIR/Downloader.java\"\n  targetZip=\"$TMP_DOWNLOAD_DIR/$distributionUrlName\"\n  cat >\"$javaSource\" <<-END\n\tpublic class Downloader extends java.net.Authenticator\n\t{\n\t  protected java.net.PasswordAuthentication getPasswordAuthentication()\n\t  {\n\t    return new java.net.PasswordAuthentication( System.getenv( \"MVNW_USERNAME\" ), System.getenv( \"MVNW_PASSWORD\" ).toCharArray() );\n\t  }\n\t  public static void main( String[] args ) throws Exception\n\t  {\n\t    setDefault( new Downloader() );\n\t    java.nio.file.Files.copy( java.net.URI.create( args[0] ).toURL().openStream(), java.nio.file.Paths.get( args[1] ).toAbsolutePath().normalize() );\n\t  }\n\t}\n\tEND\n  # For Cygwin/MinGW, switch paths to Windows format before running javac and java\n  verbose \" - Compiling Downloader.java ...\"\n  \"$(native_path \"$JAVACCMD\")\" \"$(native_path \"$javaSource\")\" || die \"Failed to compile Downloader.java\"\n  verbose \" - Running Downloader.java ...\"\n  \"$(native_path \"$JAVACMD\")\" -cp \"$(native_path \"$TMP_DOWNLOAD_DIR\")\" Downloader \"$distributionUrl\" \"$(native_path \"$targetZip\")\"\nfi\n\n# If specified, validate the SHA-256 sum of the Maven distribution zip file\nif [ -n \"${distributionSha256Sum-}\" ]; then\n  distributionSha256Result=false\n  if [ \"$MVN_CMD\" = mvnd.sh ]; then\n    echo \"Checksum validation is not supported for maven-mvnd.\" >&2\n    echo \"Please disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\" >&2\n    exit 1\n  elif command -v sha256sum >/dev/null; then\n    if echo \"$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName\" | sha256sum -c >/dev/null 2>&1; then\n      distributionSha256Result=true\n    fi\n  elif command -v shasum >/dev/null; then\n    if echo \"$distributionSha256Sum  $TMP_DOWNLOAD_DIR/$distributionUrlName\" | shasum -a 256 -c >/dev/null 2>&1; then\n      distributionSha256Result=true\n    fi\n  else\n    echo \"Checksum validation was requested but neither 'sha256sum' or 'shasum' are available.\" >&2\n    echo \"Please install either command, or disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\" >&2\n    exit 1\n  fi\n  if [ $distributionSha256Result = false ]; then\n    echo \"Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised.\" >&2\n    echo \"If you updated your Maven version, you need to update the specified distributionSha256Sum property.\" >&2\n    exit 1\n  fi\nfi\n\n# unzip and move\nif command -v unzip >/dev/null; then\n  unzip ${__MVNW_QUIET_UNZIP:+\"$__MVNW_QUIET_UNZIP\"} \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -d \"$TMP_DOWNLOAD_DIR\" || die \"failed to unzip\"\nelse\n  tar xzf${__MVNW_QUIET_TAR:+\"$__MVNW_QUIET_TAR\"} \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -C \"$TMP_DOWNLOAD_DIR\" || die \"failed to untar\"\nfi\nprintf %s\\\\n \"$distributionUrl\" >\"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain/mvnw.url\"\nmv -- \"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain\" \"$MAVEN_HOME\" || [ -d \"$MAVEN_HOME\" ] || die \"fail to move MAVEN_HOME\"\n\nclean || :\nexec_maven \"$@\"\n",
      "mvnw.cmd": "<# : batch portion\r\n@REM ----------------------------------------------------------------------------\r\n@REM Licensed to the Apache Software Foundation (ASF) under one\r\n@REM or more contributor license agreements.  See the NOTICE file\r\n@REM distributed with this work for additional information\r\n@REM regarding copyright ownership.  The ASF licenses this file\r\n@REM to you under the Apache License, Version 2.0 (the\r\n@REM \"License\"); you may not use this file except in compliance\r\n@REM with the License.  You may obtain a copy of the License at\r\n@REM\r\n@REM    http://www.apache.org/licenses/LICENSE-2.0\r\n@REM\r\n@REM Unless required by applicable law or agreed to in writing,\r\n@REM software distributed under the License is distributed on an\r\n@REM \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n@REM KIND, either express or implied.  See the License for the\r\n@REM specific language governing permissions and limitations\r\n@REM under the License.\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@REM ----------------------------------------------------------------------------\r\n@REM Apache Maven Wrapper startup batch script, version 3.3.2\r\n@REM\r\n@REM Optional ENV vars\r\n@REM   MVNW_REPOURL - repo url base for downloading maven distribution\r\n@REM   MVNW_USERNAME/MVNW_PASSWORD - user and password for downloading maven\r\n@REM   MVNW_VERBOSE - true: enable verbose log; others: silence the output\r\n@REM ----------------------------------------------------------------------------\r\n\r\n@IF \"%__MVNW_ARG0_NAME__%\"==\"\" (SET __MVNW_ARG0_NAME__=%~nx0)\r\n@SET __MVNW_CMD__=\r\n@SET __MVNW_ERROR__=\r\n@SET __MVNW_PSMODULEP_SAVE=%PSModulePath%\r\n@SET PSModulePath=\r\n@FOR /F \"usebackq tokens=1* delims==\" %%A IN (`powershell -noprofile \"& {$scriptDir='%~dp0'; $script='%__MVNW_ARG0_NAME__%'; icm -ScriptBlock ([Scriptblock]::Create((Get-Content -Raw '%~f0'))) -NoNewScope}\"`) DO @(\r\n  IF \"%%A\"==\"MVN_CMD\" (set __MVNW_CMD__=%%B) ELSE IF \"%%B\"==\"\" (echo %%A) ELSE (echo %%A=%%B)\r\n)\r\n@SET PSModulePath=%__MVNW_PSMODULEP_SAVE%\r\n@SET __MVNW_PSMODULEP_SAVE=\r\n@SET __MVNW_ARG0_NAME__=\r\n@SET MVNW_USERNAME=\r\n@SET MVNW_PASSWORD=\r\n@IF NOT \"%__MVNW_CMD__%\"==\"\" (%__MVNW_CMD__% %*)\r\n@echo Cannot start maven from wrapper >&2 && exit /b 1\r\n@GOTO :EOF\r\n: end batch / begin powershell #>\r\n\r\n$ErrorActionPreference = \"Stop\"\r\nif ($env:MVNW_VERBOSE -eq \"true\") {\r\n  $VerbosePreference = \"Continue\"\r\n}\r\n\r\n# calculate distributionUrl, requires .mvn/wrapper/maven-wrapper.properties\r\n$distributionUrl = (Get-Content -Raw \"$scriptDir/.mvn/wrapper/maven-wrapper.properties\" | ConvertFrom-StringData).distributionUrl\r\nif (!$distributionUrl) {\r\n  Write-Error \"cannot read distributionUrl property in $scriptDir/.mvn/wrapper/maven-wrapper.properties\"\r\n}\r\n\r\nswitch -wildcard -casesensitive ( $($distributionUrl -replace '^.*/','') ) {\r\n  \"maven-mvnd-*\" {\r\n    $USE_MVND = $true\r\n    $distributionUrl = $distributionUrl -replace '-bin\\.[^.]*$',\"-windows-amd64.zip\"\r\n    $MVN_CMD = \"mvnd.cmd\"\r\n    break\r\n  }\r\n  default {\r\n    $USE_MVND = $false\r\n    $MVN_CMD = $script -replace '^mvnw','mvn'\r\n    break\r\n  }\r\n}\r\n\r\n# apply MVNW_REPOURL and calculate MAVEN_HOME\r\n# maven home pattern: ~/.m2/wrapper/dists/{apache-maven-<version>,maven-mvnd-<version>-<platform>}/<hash>\r\nif ($env:MVNW_REPOURL) {\r\n  $MVNW_REPO_PATTERN = if ($USE_MVND) { \"/org/apache/maven/\" } else { \"/maven/mvnd/\" }\r\n  $distributionUrl = \"$env:MVNW_REPOURL$MVNW_REPO_PATTERN$($distributionUrl -replace '^.*'+$MVNW_REPO_PATTERN,'')\"\r\n}\r\n$distributionUrlName = $distributionUrl -replace '^.*/',''\r\n$distributionUrlNameMain = $distributionUrlName -replace '\\.[^.]*$','' -replace '-bin$',''\r\n$MAVEN_HOME_PARENT = \"$HOME/.m2/wrapper/dists/$distributionUrlNameMain\"\r\nif ($env:MAVEN_USER_HOME) {\r\n  $MAVEN_HOME_PARENT = \"$env:MAVEN_USER_HOME/wrapper/dists/$distributionUrlNameMain\"\r\n}\r\n$MAVEN_HOME_NAME = ([System.Security.Cryptography.MD5]::Create().ComputeHash([byte[]][char[]]$distributionUrl) | ForEach-Object {$_.ToString(\"x2\")}) -join ''\r\n$MAVEN_HOME = \"$MAVEN_HOME_PARENT/$MAVEN_HOME_NAME\"\r\n\r\nif (Test-Path -Path \"$MAVEN_HOME\" -PathType Container) {\r\n  Write-Verbose \"found existing MAVEN_HOME at $MAVEN_HOME\"\r\n  Write-Output \"MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD\"\r\n  exit $?\r\n}\r\n\r\nif (! $distributionUrlNameMain -or ($distributionUrlName -eq $distributionUrlNameMain)) {\r\n  Write-Error \"distributionUrl is not valid, must end with *-bin.zip, but found $distributionUrl\"\r\n}\r\n\r\n# prepare tmp dir\r\n$TMP_DOWNLOAD_DIR_HOLDER = New-TemporaryFile\r\n$TMP_DOWNLOAD_DIR = New-Item -Itemtype Directory -Path \"$TMP_DOWNLOAD_DIR_HOLDER.dir\"\r\n$TMP_DOWNLOAD_DIR_HOLDER.Delete() | Out-Null\r\ntrap {\r\n  if ($TMP_DOWNLOAD_DIR.Exists) {\r\n    try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }\r\n    catch { Write-Warning \"Cannot remove $TMP_DOWNLOAD_DIR\" }\r\n  }\r\n}\r\n\r\nNew-Item -Itemtype Directory -Path \"$MAVEN_HOME_PARENT\" -Force | Out-Null\r\n\r\n# Download and Install Apache Maven\r\nWrite-Verbose \"Couldn't find MAVEN_HOME, downloading and installing it ...\"\r\nWrite-Verbose \"Downloading from: $distributionUrl\"\r\nWrite-Verbose \"Downloading to: $TMP_DOWNLOAD_DIR/$distributionUrlName\"\r\n\r\n$webclient = New-Object System.Net.WebClient\r\nif ($env:MVNW_USERNAME -and $env:MVNW_PASSWORD) {\r\n  $webclient.Credentials = New-Object System.Net.NetworkCredential($env:MVNW_USERNAME, $env:MVNW_PASSWORD)\r\n}\r\n[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\r\n$webclient.DownloadFile($distributionUrl, \"$TMP_DOWNLOAD_DIR/$distributionUrlName\") | Out-Null\r\n\r\n# If specified, validate the SHA-256 sum of the Maven distribution zip file\r\n$distributionSha256Sum = (Get-Content -Raw \"$scriptDir/.mvn/wrapper/maven-wrapper.properties\" | ConvertFrom-StringData).distributionSha256Sum\r\nif ($distributionSha256Sum) {\r\n  if ($USE_MVND) {\r\n    Write-Error \"Checksum validation is not supported for maven-mvnd. `nPlease disable validation by removing 'distributionSha256Sum' from your maven-wrapper.properties.\"\r\n  }\r\n  Import-Module $PSHOME\\Modules\\Microsoft.PowerShell.Utility -Function Get-FileHash\r\n  if ((Get-FileHash \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -Algorithm SHA256).Hash.ToLower() -ne $distributionSha256Sum) {\r\n    Write-Error \"Error: Failed to validate Maven distribution SHA-256, your Maven distribution might be compromised. If you updated your Maven version, you need to update the specified distributionSha256Sum property.\"\r\n  }\r\n}\r\n\r\n# unzip and move\r\nExpand-Archive \"$TMP_DOWNLOAD_DIR/$distributionUrlName\" -DestinationPath \"$TMP_DOWNLOAD_DIR\" | Out-Null\r\nRename-Item -Path \"$TMP_DOWNLOAD_DIR/$distributionUrlNameMain\" -NewName $MAVEN_HOME_NAME | Out-Null\r\ntry {\r\n  Move-Item -Path \"$TMP_DOWNLOAD_DIR/$MAVEN_HOME_NAME\" -Destination $MAVEN_HOME_PARENT | Out-Null\r\n} catch {\r\n  if (! (Test-Path -Path \"$MAVEN_HOME\" -PathType Container)) {\r\n    Write-Error \"fail to move MAVEN_HOME\"\r\n  }\r\n} finally {\r\n  try { Remove-Item $TMP_DOWNLOAD_DIR -Recurse -Force | Out-Null }\r\n  catch { Write-Warning \"Cannot remove $TMP_DOWNLOAD_DIR\" }\r\n}\r\n\r\nWrite-Output \"MVN_CMD=$MAVEN_HOME/bin/$MVN_CMD\"\r\n",
      "pom.xml": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>3.4.3</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.sena_proyecto_car_2025</groupId>\r\n\t<artifactId>sprint-boot</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>sprint-boot</name>\r\n\t<description>Demo project for Spring Boot</description>\r\n\t<url/>\r\n\t<licenses>\r\n\t\t<license/>\r\n\t</licenses>\r\n\t<developers>\r\n\t\t<developer/>\r\n\t</developers>\r\n\t<scm>\r\n\t\t<connection/>\r\n\t\t<developerConnection/>\r\n\t\t<tag/>\r\n\t\t<url/>\r\n\t</scm>\r\n\t<properties>\r\n\t\t<java.version>21</java.version>\r\n\t</properties>\r\n\t<dependencies>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-actuator</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-data-jpa</artifactId>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-web</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-devtools</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t\t<optional>true</optional>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>com.mysql</groupId>\r\n\t\t\t<artifactId>mysql-connector-j</artifactId>\r\n\t\t\t<scope>runtime</scope>\r\n\t\t</dependency>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t</dependency>\r\n\t\t<!-- agrege esta dependecia para utilizarlo con mariadb -->\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.mariadb.jdbc</groupId>\r\n\t\t\t<artifactId>mariadb-java-client</artifactId>\r\n\t\t\t<version>3.0.5</version>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n",
      "src": {
        "main": {
          "java": {
            "com": {
              "sena_proyecto_car_2025": {
                "controller": {
                  "aprendiz_controller.java": "package com.sena_proyecto_car_2025.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.RestController;\r\nimport com.sena_proyecto_car_2025.model.Aprendiz;\r\nimport com.sena_proyecto_car_2025.service.AprendizService;\r\n\r\n@RestController\r\n@RequestMapping(\"/aprendiz\") \r\npublic class aprendiz_controller {\r\n\r\n    @Autowired\r\n    private AprendizService aprendizService;\r\n    \r\n    @PostMapping(\"/Aprendiz\")\r\n    public String registrarAprendiz(@RequestBody Aprendiz aprendiz) {\r\n        try {\r\n            aprendizService.save(aprendiz);\r\n            return \"Aprendiz registrado\";\r\n        } catch (Exception e) {\r\n            return \"Error al registrar aprendiz: \" + e.getMessage();\r\n        }\r\n    }\r\n}\r\n",
                  "aprendiz_curso_controller.java": "package com.sena_proyecto_car_2025.controller;\r\n//se importan las librerias necesarias\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport com.sena_proyecto_car_2025.model.aprendiz_curso;\r\nimport com.sena_proyecto_car_2025.service.AprendizCursoService;\r\nimport com.sena_proyecto_car_2025.Dto.AprendizCursoDTO;\r\nimport com.sena_proyecto_car_2025.Dto.GenericResponseDTO;\r\nimport com.sena_proyecto_car_2025.model.Aprendiz;\r\nimport com.sena_proyecto_car_2025.model.Cursos;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/aprendiz-curso\")\r\n@CrossOrigin(origins = \"*\")\r\npublic class aprendiz_curso_controller {\r\n    @Autowired\r\n    private AprendizCursoService aprendizCursoService;\r\n\r\n    // Crear nuevo registro\r\n    @PostMapping(\"\")\r\n    public ResponseEntity<GenericResponseDTO<AprendizCursoDTO>> crear(@RequestBody AprendizCursoDTO dto) {\r\n        try {\r\n            aprendiz_curso entity = convertToEntity(dto);\r\n            aprendizCursoService.save(entity);\r\n            return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Registro creado exitosamente\", dto));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al crear registro: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Obtener todos los registros\r\n    @GetMapping(\"\")\r\n    public ResponseEntity<GenericResponseDTO<List<AprendizCursoDTO>>> obtenerTodos() {\r\n        try {\r\n            Iterable<aprendiz_curso> entities = aprendizCursoService.findAll();\r\n            List<AprendizCursoDTO> dtos = new ArrayList<>();\r\n            entities.forEach(entity -> dtos.add(convertToDTO(entity)));\r\n            return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Registros obtenidos exitosamente\", dtos));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al obtener registros: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Obtener por ID\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<AprendizCursoDTO>> obtenerPorId(@PathVariable Long id) {\r\n        try {\r\n            aprendiz_curso entity = aprendizCursoService.findById(id);\r\n            if (entity != null) {\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Registro encontrado\", convertToDTO(entity)));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al obtener registro: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Actualizar registro\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<AprendizCursoDTO>> actualizar(\r\n            @PathVariable Long id, \r\n            @RequestBody AprendizCursoDTO dto) {\r\n        try {\r\n            aprendiz_curso existente = aprendizCursoService.findById(id);\r\n            if (existente != null) {\r\n                aprendiz_curso entity = convertToEntity(dto);\r\n                entity.setId_aprendiz_curso(id.intValue());\r\n                aprendizCursoService.update(entity);\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Registro actualizado exitosamente\", dto));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al actualizar registro: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Eliminar registro\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<Void>> eliminar(@PathVariable Long id) {\r\n        try {\r\n            aprendiz_curso existente = aprendizCursoService.findById(id);\r\n            if (existente != null) {\r\n                aprendizCursoService.delete(id);\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Registro eliminado exitosamente\", null));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al eliminar registro: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Métodos auxiliares para convertir entre DTO y Entity\r\n    private AprendizCursoDTO convertToDTO(aprendiz_curso entity) {\r\n        AprendizCursoDTO dto = new AprendizCursoDTO();\r\n        dto.setId_aprendiz_curso(entity.getId_aprendiz_curso());\r\n        dto.setId_curso(entity.getCurso().getIdCurso());\r\n        dto.setId_aprendiz(entity.getAprendiz().getId_aprendiz());\r\n        dto.setFechaInscripcion(entity.getFechaInscripcion());\r\n        return dto;\r\n    }\r\n\r\n    private aprendiz_curso convertToEntity(AprendizCursoDTO dto) {\r\n        Cursos curso = new Cursos();\r\n        curso.setIdCurso(dto.getId_curso());\r\n\r\n        Aprendiz aprendiz = new Aprendiz();\r\n        aprendiz.setId_aprendiz(dto.getId_aprendiz());\r\n\r\n        return new aprendiz_curso(curso, aprendiz, dto.getFechaInscripcion());\r\n    }\r\n}\r\n",
                  "certificados_controller.java": "package com.sena_proyecto_car_2025.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport com.sena_proyecto_car_2025.model.Certificados;\r\nimport com.sena_proyecto_car_2025.model.lecciones;\r\nimport com.sena_proyecto_car_2025.model.Aprendiz;\r\nimport com.sena_proyecto_car_2025.service.CertificadosService;\r\nimport com.sena_proyecto_car_2025.Dto.CertificadosDTO;\r\nimport com.sena_proyecto_car_2025.Dto.GenericResponseDTO;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/certificados\")\r\n@CrossOrigin(origins = \"*\")\r\npublic class certificados_controller {\r\n\r\n    @Autowired\r\n    private CertificadosService certificadosService;\r\n\r\n    // Crear nuevo certificado\r\n    @PostMapping(\"\")\r\n    public ResponseEntity<GenericResponseDTO<CertificadosDTO>> crear(@RequestBody CertificadosDTO dto) {\r\n        try {\r\n            Certificados entity = convertToEntity(dto);\r\n            certificadosService.save(entity);\r\n            return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Certificado creado exitosamente\", dto));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al crear certificado: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Obtener todos los certificados\r\n    @GetMapping(\"\")\r\n    public ResponseEntity<GenericResponseDTO<List<CertificadosDTO>>> obtenerTodos() {\r\n        try {\r\n            Iterable<Certificados> entities = certificadosService.findAll();\r\n            List<CertificadosDTO> dtos = new ArrayList<>();\r\n            entities.forEach(entity -> dtos.add(convertToDTO(entity)));\r\n            return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Certificados obtenidos exitosamente\", dtos));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al obtener certificados: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Obtener certificado por ID\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<CertificadosDTO>> obtenerPorId(@PathVariable Integer id) {\r\n        try {\r\n            Certificados entity = certificadosService.findById(id);\r\n            if (entity != null) {\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Certificado encontrado\", convertToDTO(entity)));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al obtener certificado: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Actualizar certificado\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<CertificadosDTO>> actualizar(\r\n            @PathVariable Integer id, \r\n            @RequestBody CertificadosDTO dto) {\r\n        try {\r\n            Certificados existente = certificadosService.findById(id);\r\n            if (existente != null) {\r\n                Certificados entity = convertToEntity(dto);\r\n                entity.setIdCertificado(id);\r\n                certificadosService.update(entity);\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Certificado actualizado exitosamente\", dto));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al actualizar certificado: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Eliminar certificado\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<Void>> eliminar(@PathVariable Integer id) {\r\n        try {\r\n            Certificados existente = certificadosService.findById(id);\r\n            if (existente != null) {\r\n                certificadosService.delete(id);\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Certificado eliminado exitosamente\", null));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al eliminar certificado: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Métodos auxiliares para convertir entre DTO y Entity\r\n    private CertificadosDTO convertToDTO(Certificados entity) {\r\n        CertificadosDTO dto = new CertificadosDTO();\r\n        dto.setIdCertificado(entity.getIdCertificado());\r\n        if (entity.getLecciones() != null) {\r\n            dto.setId_lecciones(entity.getLecciones().getId_leccion());\r\n        }\r\n        if (entity.getAprendiz() != null) {\r\n            dto.setId_aprendiz(entity.getAprendiz().getId_aprendiz());\r\n        }\r\n        dto.setNombreCertificado(entity.getNombreCertificado());\r\n        dto.setNumeroDocumentoCertificado(entity.getNumeroDocumentoCertificado());\r\n        dto.setFechaFin(entity.getFechaFin());\r\n        return dto;\r\n    }\r\n\r\n    private Certificados convertToEntity(CertificadosDTO dto) {\r\n        Certificados entity = new Certificados();\r\n        entity.setIdCertificado(dto.getIdCertificado());\r\n        \r\n        if (dto.getId_lecciones() > 0) {\r\n            lecciones leccion = new lecciones();\r\n            leccion.setId_leccion(dto.getId_lecciones());\r\n            entity.setLecciones(leccion);\r\n        }\r\n        \r\n        if (dto.getId_aprendiz() > 0) {\r\n            Aprendiz aprendiz = new Aprendiz();\r\n            aprendiz.setId_aprendiz(dto.getId_aprendiz());\r\n            entity.setAprendiz(aprendiz);\r\n        }\r\n        \r\n        entity.setNombreCertificado(dto.getNombreCertificado());\r\n        entity.setNumeroDocumentoCertificado(dto.getNumeroDocumentoCertificado());\r\n        entity.setFechaFin(dto.getFechaFin());\r\n        \r\n        return entity;\r\n    }\r\n} ",
                  "cursos_controller.java": "package com.sena_proyecto_car_2025.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport com.sena_proyecto_car_2025.model.Cursos;\r\nimport com.sena_proyecto_car_2025.service.CursosService;\r\nimport com.sena_proyecto_car_2025.Dto.CursosDTO;\r\nimport com.sena_proyecto_car_2025.Dto.GenericResponseDTO;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/cursos\")\r\n@CrossOrigin(origins = \"*\")\r\npublic class cursos_controller {\r\n\r\n    @Autowired\r\n    private CursosService cursosService;\r\n\r\n    // Crear nuevo curso\r\n    @PostMapping(\"\")\r\n    public ResponseEntity<GenericResponseDTO<CursosDTO>> crear(@RequestBody CursosDTO dto) {\r\n        try {\r\n            Cursos entity = convertToEntity(dto);\r\n            cursosService.save(entity);\r\n            return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Curso creado exitosamente\", dto));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al crear curso: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Obtener todos los cursos\r\n    @GetMapping(\"\")\r\n    public ResponseEntity<GenericResponseDTO<List<CursosDTO>>> obtenerTodos() {\r\n        try {\r\n            Iterable<Cursos> entities = cursosService.findAll();\r\n            List<CursosDTO> dtos = new ArrayList<>();\r\n            entities.forEach(entity -> dtos.add(convertToDTO(entity)));\r\n            return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Cursos obtenidos exitosamente\", dtos));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al obtener cursos: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Obtener curso por ID\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<CursosDTO>> obtenerPorId(@PathVariable Integer id) {\r\n        try {\r\n            Cursos entity = cursosService.findById(id);\r\n            if (entity != null) {\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Curso encontrado\", convertToDTO(entity)));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al obtener curso: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Actualizar curso\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<CursosDTO>> actualizar(\r\n            @PathVariable Integer id, \r\n            @RequestBody CursosDTO dto) {\r\n        try {\r\n            Cursos existente = cursosService.findById(id);\r\n            if (existente != null) {\r\n                Cursos entity = convertToEntity(dto);\r\n                entity.setIdCurso(id);\r\n                cursosService.update(entity);\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Curso actualizado exitosamente\", dto));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al actualizar curso: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Eliminar curso\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<Void>> eliminar(@PathVariable Integer id) {\r\n        try {\r\n            Cursos existente = cursosService.findById(id);\r\n            if (existente != null) {\r\n                cursosService.delete(id);\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Curso eliminado exitosamente\", null));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al eliminar curso: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Métodos auxiliares para convertir entre DTO y Entity\r\n    private CursosDTO convertToDTO(Cursos entity) {\r\n        CursosDTO dto = new CursosDTO();\r\n        dto.setIdCurso(entity.getIdCurso());\r\n        dto.setCodigoFicha(entity.getCodigoFicha());\r\n        dto.setNombrePrograma(entity.getNombrePrograma());\r\n        dto.setDescripcion(entity.getDescripcion());\r\n        dto.setFechaInicio(entity.getFechaInicio());\r\n        dto.setFechaFin(entity.getFechaFin());\r\n        return dto;\r\n    }\r\n\r\n    private Cursos convertToEntity(CursosDTO dto) {\r\n        return new Cursos(\r\n            dto.getNombrePrograma(),\r\n            dto.getDescripcion(),\r\n            dto.getCodigoFicha(),\r\n            dto.getFechaInicio(),\r\n            dto.getFechaFin()\r\n        );\r\n    }\r\n} ",
                  "lecciones_controller.java": "package com.sena_proyecto_car_2025.controller;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport com.sena_proyecto_car_2025.model.lecciones;\r\nimport com.sena_proyecto_car_2025.model.Cursos;\r\nimport com.sena_proyecto_car_2025.service.LeccionesService;\r\nimport com.sena_proyecto_car_2025.Dto.LeccionesDTO;\r\nimport com.sena_proyecto_car_2025.Dto.CursosDTO;\r\nimport com.sena_proyecto_car_2025.Dto.GenericResponseDTO;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/lecciones\")\r\n@CrossOrigin(origins = \"*\")\r\npublic class lecciones_controller {\r\n\r\n    @Autowired\r\n    private LeccionesService leccionesService;\r\n\r\n    // Crear nueva lección\r\n    @PostMapping(\"\")\r\n    public ResponseEntity<GenericResponseDTO<LeccionesDTO>> crear(@RequestBody LeccionesDTO dto) {\r\n        try {\r\n            lecciones entity = convertToEntity(dto);\r\n            leccionesService.save(entity);\r\n            return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Lección creada exitosamente\", dto));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al crear lección: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Obtener todas las lecciones\r\n    @GetMapping(\"\")\r\n    public ResponseEntity<GenericResponseDTO<List<LeccionesDTO>>> obtenerTodos() {\r\n        try {\r\n            Iterable<lecciones> entities = leccionesService.findAll();\r\n            List<LeccionesDTO> dtos = new ArrayList<>();\r\n            entities.forEach(entity -> dtos.add(convertToDTO(entity)));\r\n            return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Lecciones obtenidas exitosamente\", dtos));\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al obtener lecciones: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Obtener lección por ID\r\n    @GetMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<LeccionesDTO>> obtenerPorId(@PathVariable Integer id) {\r\n        try {\r\n            lecciones entity = leccionesService.findById(id);\r\n            if (entity != null) {\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Lección encontrada\", convertToDTO(entity)));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al obtener lección: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Actualizar lección\r\n    @PutMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<LeccionesDTO>> actualizar(\r\n            @PathVariable Integer id, \r\n            @RequestBody LeccionesDTO dto) {\r\n        try {\r\n            lecciones existente = leccionesService.findById(id);\r\n            if (existente != null) {\r\n                lecciones entity = convertToEntity(dto);\r\n                entity.setId_leccion(id);\r\n                leccionesService.update(entity);\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Lección actualizada exitosamente\", dto));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al actualizar lección: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Eliminar lección\r\n    @DeleteMapping(\"/{id}\")\r\n    public ResponseEntity<GenericResponseDTO<Void>> eliminar(@PathVariable Integer id) {\r\n        try {\r\n            lecciones existente = leccionesService.findById(id);\r\n            if (existente != null) {\r\n                leccionesService.delete(id);\r\n                return ResponseEntity.ok(new GenericResponseDTO<>(200, \"Lección eliminada exitosamente\", null));\r\n            } else {\r\n                return ResponseEntity.notFound()\r\n                    .build();\r\n            }\r\n        } catch (Exception e) {\r\n            return ResponseEntity.badRequest()\r\n                .body(new GenericResponseDTO<>(400, \"Error al eliminar lección: \" + e.getMessage(), null));\r\n        }\r\n    }\r\n\r\n    // Métodos auxiliares para convertir entre DTO y Entity\r\n    private LeccionesDTO convertToDTO(lecciones entity) {\r\n        LeccionesDTO dto = new LeccionesDTO();\r\n        dto.setId_leccion(entity.getId_leccion());\r\n        dto.setNombre_leccion(entity.getNombre_leccion());\r\n        dto.setDescripcion(entity.getDescripcion());\r\n        dto.setRuta_leccion(entity.getRuta_leccion());\r\n        if (entity.getCurso() != null) {\r\n            dto.setId_curso(entity.getCurso().getIdCurso());\r\n        }\r\n        return dto;\r\n    }\r\n\r\n    private lecciones convertToEntity(LeccionesDTO dto) {\r\n        Cursos curso = new Cursos();\r\n        curso.setIdCurso(dto.getId_curso());\r\n\r\n        return  new lecciones(\r\n            dto.getId_leccion(),\r\n            dto.getNombre_leccion(),\r\n            dto.getDescripcion(),\r\n            dto.getRuta_leccion(),\r\n            curso \r\n        );\r\n    }\r\n}"
                },
                "Dto": {
                  "AprendizCursoDTO.java": " package com.sena_proyecto_car_2025.Dto;\r\n\r\nimport java.sql.Timestamp;\r\n\r\npublic class AprendizCursoDTO {\r\n    private int id_aprendiz_curso;\r\n    private int id_curso;      // Para la relación con Cursos\r\n    private int id_aprendiz;   // Para la relación con Aprendiz\r\n    private Timestamp fechaInscripcion;\r\n\r\n    // Constructor\r\n    public AprendizCursoDTO() {}\r\n\r\n    // Getters y Setters\r\n    public int getId_aprendiz_curso() {\r\n        return id_aprendiz_curso;\r\n    }\r\n\r\n    public void setId_aprendiz_curso(int id_aprendiz_curso) {\r\n        this.id_aprendiz_curso = id_aprendiz_curso;\r\n    }\r\n\r\n    public int getId_curso() {\r\n        return id_curso;\r\n    }\r\n\r\n    public void setId_curso(int id_curso) {\r\n        this.id_curso = id_curso;\r\n    }\r\n\r\n    public int getId_aprendiz() {\r\n        return id_aprendiz;\r\n    }\r\n\r\n    public void setId_aprendiz(int id_aprendiz) {\r\n        this.id_aprendiz = id_aprendiz;\r\n    }\r\n\r\n    public Timestamp getFechaInscripcion() {\r\n        return fechaInscripcion;\r\n    }\r\n\r\n    public void setFechaInscripcion(Timestamp fechaInscripcion) {\r\n        this.fechaInscripcion = fechaInscripcion;\r\n    }\r\n}",
                  "AprendizDTO.java": "package com.sena_proyecto_car_2025.Dto;\r\n\r\npublic class AprendizDTO {\r\n    private int id_aprendiz;\r\n    private String nombre;\r\n    private long numeroDocumento;\r\n    private String correo;\r\n    private String contraseña;\r\n    private boolean tipoUsuario;\r\n\r\n    // Constructor\r\n    public AprendizDTO() {}\r\n\r\n    // Getters y Setters\r\n    public int getId_aprendiz() {\r\n        return id_aprendiz;\r\n    }\r\n\r\n    public void setId_aprendiz(int id_aprendiz) {\r\n        this.id_aprendiz = id_aprendiz;\r\n    }\r\n\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public long getNumeroDocumento() {\r\n        return numeroDocumento;\r\n    }\r\n\r\n    public void setNumeroDocumento(long numeroDocumento) {\r\n        this.numeroDocumento = numeroDocumento;\r\n    }\r\n\r\n    public String getCorreo() {\r\n        return correo;\r\n    }\r\n\r\n    public void setCorreo(String correo) {\r\n        this.correo = correo;\r\n    }\r\n\r\n    public String getContraseña() {\r\n        return contraseña;\r\n    }\r\n\r\n    public void setContraseña(String contraseña) {\r\n        this.contraseña = contraseña;\r\n    }\r\n\r\n    public boolean isTipoUsuario() {\r\n        return tipoUsuario;\r\n    }\r\n\r\n    public void setTipoUsuario(boolean tipoUsuario) {\r\n        this.tipoUsuario = tipoUsuario;\r\n    }\r\n} ",
                  "CertificadosDTO.java": " package com.sena_proyecto_car_2025.Dto;\r\n\r\nimport java.sql.Timestamp;\r\n\r\npublic class CertificadosDTO {\r\n    private int idCertificado;\r\n    private int id_lecciones; // Para la relación con Lecciones\r\n    private int id_aprendiz;  // Para la relación con Aprendiz\r\n    private String nombreCertificado;\r\n    private int numeroDocumentoCertificado;\r\n    private Timestamp fechaFin;\r\n\r\n    // Constructor\r\n    public CertificadosDTO() {}\r\n\r\n    // Getters y Setters\r\n    public int getIdCertificado() {\r\n        return idCertificado;\r\n    }\r\n\r\n    public void setIdCertificado(int idCertificado) {\r\n        this.idCertificado = idCertificado;\r\n    }\r\n\r\n    public int getId_lecciones() {\r\n        return id_lecciones;\r\n    }\r\n\r\n    public void setId_lecciones(int id_lecciones) {\r\n        this.id_lecciones = id_lecciones;\r\n    }\r\n\r\n    public int getId_aprendiz() {\r\n        return id_aprendiz;\r\n    }\r\n\r\n    public void setId_aprendiz(int id_aprendiz) {\r\n        this.id_aprendiz = id_aprendiz;\r\n    }\r\n\r\n    public String getNombreCertificado() {\r\n        return nombreCertificado;\r\n    }\r\n\r\n    public void setNombreCertificado(String nombreCertificado) {\r\n        this.nombreCertificado = nombreCertificado;\r\n    }\r\n\r\n    public int getNumeroDocumentoCertificado() {\r\n        return numeroDocumentoCertificado;\r\n    }\r\n\r\n    public void setNumeroDocumentoCertificado(int numeroDocumentoCertificado) {\r\n        this.numeroDocumentoCertificado = numeroDocumentoCertificado;\r\n    }\r\n\r\n    public Timestamp getFechaFin() {\r\n        return fechaFin;\r\n    }\r\n\r\n    public void setFechaFin(Timestamp fechaFin) {\r\n        this.fechaFin = fechaFin;\r\n    }\r\n}",
                  "CursosDTO.java": "package com.sena_proyecto_car_2025.Dto;\r\n\r\nimport java.sql.Timestamp;\r\n\r\npublic class CursosDTO {\r\n    private int idCurso;\r\n    private int codigoFicha;\r\n    private String nombrePrograma;\r\n    private String descripcion;\r\n    private Timestamp fechaInicio;\r\n    private Timestamp fechaFin;\r\n\r\n    // Constructor\r\n    public CursosDTO() {\r\n        \r\n    }\r\n\r\n    // Getters y Setters\r\n    public int getIdCurso() {\r\n        return idCurso;\r\n    }\r\n\r\n    public void setIdCurso(int idCurso) {\r\n        this.idCurso = idCurso;\r\n    }\r\n\r\n    public int getCodigoFicha() {\r\n        return codigoFicha;\r\n    }\r\n\r\n    public void setCodigoFicha(int codigoFicha) {\r\n        this.codigoFicha = codigoFicha;\r\n    }\r\n\r\n    public String getNombrePrograma() {\r\n        return nombrePrograma;\r\n    }\r\n\r\n    public void setNombrePrograma(String nombrePrograma) {\r\n        this.nombrePrograma = nombrePrograma;\r\n    }\r\n\r\n    public String getDescripcion() {\r\n        return descripcion;\r\n    }\r\n\r\n    public void setDescripcion(String descripcion) {\r\n        this.descripcion = descripcion;\r\n    }\r\n\r\n    public Timestamp getFechaInicio() {\r\n        return fechaInicio;\r\n    }\r\n\r\n    public void setFechaInicio(Timestamp fechaInicio) {\r\n        this.fechaInicio = fechaInicio;\r\n    }\r\n\r\n    public Timestamp getFechaFin() {\r\n        return fechaFin;\r\n    }\r\n\r\n    public void setFechaFin(Timestamp fechaFin) {\r\n        this.fechaFin = fechaFin;\r\n    }\r\n} ",
                  "GenericResponseDTO.java": "package com.sena_proyecto_car_2025.Dto;\r\n\r\npublic class GenericResponseDTO<T> {\r\n    private int status;\r\n    private String message;\r\n    private T data;\r\n\r\n    public GenericResponseDTO(int status, String message, T data) {\r\n        this.status = status;\r\n        this.message = message;\r\n        this.data = data;\r\n    }\r\n\r\n    // Getters y Setters\r\n    public int getStatus() {\r\n        return status;\r\n    }\r\n\r\n    public void setStatus(int status) {\r\n        this.status = status;\r\n    }\r\n\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n\r\n    public void setMessage(String message) {\r\n        this.message = message;\r\n    }\r\n\r\n    public T getData() {\r\n        return data;\r\n    }\r\n\r\n    public void setData(T data) {\r\n        this.data = data;\r\n    }\r\n} ",
                  "LeccionesDTO.java": " package com.sena_proyecto_car_2025.Dto;\r\n\r\npublic class LeccionesDTO {\r\n    private int id_leccion;\r\n    private String nombre_leccion;\r\n    private String descripcion;\r\n    private String ruta_leccion;\r\n    private int id_curso; // Para la relación con Cursos\r\n\r\n    // Constructor\r\n    public LeccionesDTO() {}\r\n\r\n    // Getters y Setters\r\n    public int getId_leccion() {\r\n        return id_leccion;\r\n    }\r\n\r\n    public void setId_leccion(int id_leccion) {\r\n        this.id_leccion = id_leccion;\r\n    }\r\n\r\n    public String getNombre_leccion() {\r\n        return nombre_leccion;\r\n    }\r\n\r\n    public void setNombre_leccion(String nombre_leccion) {\r\n        this.nombre_leccion = nombre_leccion;\r\n    }\r\n\r\n    public String getDescripcion() {\r\n        return descripcion;\r\n    }\r\n\r\n    public void setDescripcion(String descripcion) {\r\n        this.descripcion = descripcion;\r\n    }\r\n\r\n    public String getRuta_leccion() {\r\n        return ruta_leccion;\r\n    }\r\n\r\n    public void setRuta_leccion(String ruta_leccion) {\r\n        this.ruta_leccion = ruta_leccion;\r\n    }\r\n\r\n    public int getId_curso() {\r\n        return id_curso;\r\n    }\r\n\r\n    public void setId_curso(int id_curso) {\r\n        this.id_curso = id_curso;\r\n    }\r\n}",
                  "responseDTO.java": "package com.sena_proyecto_car_2025.Dto;\r\n\r\n// una clase \r\npublic class responseDTO {\r\n    // Atributos\r\n    private String status;\r\n    private String message;\r\n    private String type;\r\n    // Metodos\r\n    // Constructor\r\n    public void message(String message,String status, String type) {\r\n        this.status=status;\r\n        this.message = message;\r\n        this.type = type;\r\n    }\r\n    \r\n    // Getters y Setters\r\n    public String getStatus() {\r\n        return status;\r\n    }\r\n    public void setStatus(String status) {\r\n        this.status = status;\r\n    }\r\n    public String getMessage() {\r\n        return message;\r\n    }\r\n    public void setMessage(String message) {\r\n        this.message = message;\r\n    }\r\n    public String getType() {\r\n        return type;\r\n    }\r\n    public void setType(String type) {\r\n        this.type = type;\r\n    }\r\n}"
                },
                "model": {
                  "aprendiz_curso.java": "package com.sena_proyecto_car_2025.model;\r\n\r\n\r\nimport java.sql.Timestamp;\r\n\r\nimport jakarta.persistence.CascadeType;\r\nimport jakarta.persistence.Column;\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport jakarta.persistence.Id;\r\nimport jakarta.persistence.JoinColumn;\r\nimport jakarta.persistence.ManyToOne;\r\n\r\n\r\n@Entity(name = \"aprendiz_curso\")\r\npublic class aprendiz_curso{\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private int id_aprendiz_curso;\r\n\r\n    @ManyToOne(cascade = CascadeType.MERGE)\r\n    @JoinColumn(name = \"id_curso\")\r\n    private Cursos curso;\r\n\r\n    @ManyToOne(cascade = CascadeType.MERGE)\r\n    @JoinColumn(name = \"id_aprendiz\")\r\n    private Aprendiz aprendiz;\r\n\r\n    @Column(name = \"fecha_inscripcion\")\r\n    private Timestamp fechaInscripcion;\r\n    \r\n    // Constructor\r\n    public aprendiz_curso(Cursos curso, Aprendiz aprendiz, Timestamp fechaInscripcion) {\r\n        this.curso = curso;\r\n        this.aprendiz = aprendiz;\r\n        this.fechaInscripcion = fechaInscripcion;\r\n    }\r\n    \r\n    // Getters y Setters\r\n    public int getId_aprendiz_curso() {\r\n        return id_aprendiz_curso;\r\n    }\r\n\r\n    public void setId_aprendiz_curso(int id_aprendiz_curso) {\r\n        this.id_aprendiz_curso = id_aprendiz_curso;\r\n    }\r\n\r\n    public Cursos getCurso() {\r\n        return curso;\r\n    }\r\n\r\n    public void setCurso(Cursos curso) {\r\n        this.curso = curso;\r\n    }\r\n\r\n    public Aprendiz getAprendiz() {\r\n        return aprendiz;\r\n    }\r\n\r\n    public void setAprendiz(Aprendiz aprendiz) {\r\n        this.aprendiz = aprendiz;\r\n    }\r\n\r\n    public Timestamp getFechaInscripcion() {\r\n        return fechaInscripcion;\r\n    }\r\n\r\n    public void setFechaInscripcion(Timestamp fechaInscripcion) {\r\n        this.fechaInscripcion = fechaInscripcion;\r\n    }\r\n\r\n}",
                  "Aprendiz.java": "package com.sena_proyecto_car_2025.model;\r\n\r\nimport jakarta.persistence.Column;\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport jakarta.persistence.Id;\r\n\r\n@Entity(name = \"aprendiz\")\r\npublic class Aprendiz {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id_aprendiz\")\r\n    private int id_aprendiz;\r\n\r\n    @Column(name = \"nombre\", length = 150)\r\n    private String nombre;\r\n\r\n    @Column(name = \"numero_documento\")\r\n    private long numeroDocumento;\r\n\r\n    @Column(name = \"correo\", length = 150)\r\n    private String correo;\r\n\r\n    @Column(name = \"contraseña\", length = 12)\r\n    private String contraseña;\r\n\r\n    @Column(name = \"tipoUsuario\")\r\n    private boolean tipoUsuario;\r\n\r\n    // Constructor vacío\r\n    public Aprendiz() {}\r\n\r\n    // Constructor con parámetros\r\n    public Aprendiz(int id_aprendiz, String nombre, long numeroDocumento, String correo, String contraseña, boolean tipoUsuario) {\r\n        this.id_aprendiz = id_aprendiz;\r\n        this.nombre = nombre;\r\n        this.numeroDocumento = numeroDocumento;\r\n        this.correo = correo;\r\n        this.contraseña = contraseña;\r\n        this.tipoUsuario = tipoUsuario;\r\n    }\r\n\r\n    // Getters y Setters\r\n    public int getId_aprendiz() {\r\n        return id_aprendiz;\r\n    }\r\n\r\n    public void setId_aprendiz(int id_aprendiz) {\r\n        this.id_aprendiz = id_aprendiz;\r\n    }\r\n\r\n    public String getNombre() {\r\n        return nombre;\r\n    }\r\n\r\n    public void setNombre(String nombre) {\r\n        this.nombre = nombre;\r\n    }\r\n\r\n    public long getNumeroDocumento() {\r\n        return numeroDocumento;\r\n    }\r\n\r\n    public void setNumeroDocumento(long numeroDocumento) {\r\n        this.numeroDocumento = numeroDocumento;\r\n    }\r\n\r\n    public String getCorreo() {\r\n        return correo;\r\n    }\r\n\r\n    public void setCorreo(String correo) {\r\n        this.correo = correo;\r\n    }\r\n\r\n    public String getContraseña() {\r\n        return contraseña;\r\n    }\r\n\r\n    public void setContraseña(String contraseña) {\r\n        this.contraseña = contraseña;\r\n    }\r\n\r\n    public boolean isTipoUsuario() {\r\n        return tipoUsuario;\r\n    }\r\n\r\n    public void setTipoUsuario(boolean tipoUsuario) {\r\n        this.tipoUsuario = tipoUsuario;\r\n    }\r\n\r\n    public String getTipoUsuario() {\r\n        return tipoUsuario ? \"Aprendiz\" : \"Administrador\";\r\n    }\r\n}",
                  "Certificados.java": "package com.sena_proyecto_car_2025.model;\r\n\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport jakarta.persistence.Id;\r\nimport jakarta.persistence.Column;\r\nimport jakarta.persistence.ManyToOne;\r\nimport jakarta.persistence.JoinColumn;\r\nimport java.sql.Timestamp;\r\n\r\n@Entity(name = \"certificados\")\r\npublic class Certificados {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id_certificado\")\r\n    private int idCertificado;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"id_lecciones\")\r\n    private lecciones lecciones;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"id_aprendiz\")\r\n    private Aprendiz aprendiz;\r\n\r\n    @Column(name = \"nombre_certificado\", length = 150)\r\n    private String nombreCertificado;\r\n\r\n    @Column(name = \"numeroDocumento_certificado\")\r\n    private int numeroDocumentoCertificado;\r\n\r\n    @Column(name = \"fecha_fin\")\r\n    private Timestamp fechaFin;\r\n\r\n    // Constructor vacío\r\n    public Certificados() {}\r\n\r\n    // Constructor con parámetros\r\n    public Certificados(int idCertificado, lecciones lecciones, Aprendiz aprendiz, String nombreCertificado, int numeroDocumentoCertificado, Timestamp fechaFin) {\r\n        this.idCertificado = idCertificado;\r\n        this.lecciones = lecciones;\r\n        this.aprendiz = aprendiz;\r\n        this.nombreCertificado = nombreCertificado;\r\n        this.numeroDocumentoCertificado = numeroDocumentoCertificado;\r\n        this.fechaFin = fechaFin;\r\n    }\r\n\r\n    // Getters y Setters\r\n    public int getIdCertificado() {\r\n        return idCertificado;\r\n    }\r\n\r\n    public void setIdCertificado(int idCertificado) {\r\n        this.idCertificado = idCertificado;\r\n    }\r\n\r\n    public lecciones getLecciones() {\r\n        return lecciones;\r\n    }\r\n\r\n    public void setLecciones(lecciones lecciones) {\r\n        this.lecciones = lecciones;\r\n    }\r\n\r\n    public Aprendiz getAprendiz() {\r\n        return aprendiz;\r\n    }\r\n\r\n    public void setAprendiz(Aprendiz aprendiz) {\r\n        this.aprendiz = aprendiz;\r\n    }\r\n\r\n    public String getNombreCertificado() {\r\n        return nombreCertificado;\r\n    }\r\n\r\n    public void setNombreCertificado(String nombreCertificado) {\r\n        this.nombreCertificado = nombreCertificado;\r\n    }\r\n\r\n    public int getNumeroDocumentoCertificado() {\r\n        return numeroDocumentoCertificado;\r\n    }\r\n\r\n    public void setNumeroDocumentoCertificado(int numeroDocumentoCertificado) {\r\n        this.numeroDocumentoCertificado = numeroDocumentoCertificado;\r\n    }\r\n\r\n    public Timestamp getFechaFin() {\r\n        return fechaFin;\r\n    }\r\n\r\n    public void setFechaFin(Timestamp fechaFin) {\r\n        this.fechaFin = fechaFin;\r\n    }\r\n}\r\n",
                  "Cursos.java": "package com.sena_proyecto_car_2025.model;\r\n\r\nimport java.sql.Timestamp;\r\n\r\nimport jakarta.persistence.Column;\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport jakarta.persistence.Id;\r\n\r\n@Entity(name = \"cursos\")\r\npublic class Cursos {\r\n    \r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    @Column(name = \"id_curso\")\r\n    private int idCurso;\r\n    \r\n    @Column(name = \"codigo_ficha\")\r\n    private int codigoFicha;\r\n    \r\n    @Column(name = \"nombre_programa\", length = 150)\r\n    private String nombrePrograma;\r\n    \r\n    @Column(name = \"descripcion\")\r\n    private String descripcion;\r\n    \r\n    @Column(name = \"fecha_inicio\")\r\n    private Timestamp fechaInicio;\r\n    \r\n    @Column(name = \"fecha_fin\")\r\n    private Timestamp fechaFin;\r\n    \r\n    // Constructor\r\n    public Cursos(String nombre_programa, String descripcion, int codigo_ficha,\r\n     Timestamp fecha_inicio, Timestamp fecha_fin) {\r\n        this.nombrePrograma = nombre_programa;\r\n        this.descripcion = descripcion;\r\n        this.codigoFicha = codigo_ficha;\r\n        this.fechaInicio = fecha_inicio;\r\n        this.fechaFin = fecha_fin;\r\n    }\r\n    public Cursos() {}\r\n    // Getters y Setters\r\n    public int getIdCurso() {\r\n        return idCurso;\r\n    }\r\n    \r\n    public void setIdCurso(int idCurso) {\r\n        this.idCurso = idCurso;\r\n    }\r\n    \r\n    public String getNombrePrograma() {\r\n        return nombrePrograma;\r\n    }\r\n    \r\n    public void setNombrePrograma(String nombrePrograma) {\r\n        this.nombrePrograma = nombrePrograma;\r\n    }\r\n    \r\n    public String getDescripcion() {\r\n        return descripcion;\r\n    }\r\n    \r\n    public void setDescripcion(String descripcion) {\r\n        this.descripcion = descripcion;\r\n    }\r\n\r\n    public int getCodigoFicha() {\r\n        return codigoFicha;\r\n    }\r\n    \r\n    public void setCodigoFicha(int codigoFicha) {\r\n        this.codigoFicha = codigoFicha;\r\n    }\r\n\r\n    public Timestamp getFechaInicio() {\r\n        return fechaInicio;\r\n    }\r\n\r\n    public void setFechaInicio(Timestamp fechaInicio) {\r\n        this.fechaInicio = fechaInicio;\r\n    }\r\n\r\n    public Timestamp getFechaFin() {\r\n        return fechaFin;\r\n    }\r\n\r\n    public void setFechaFin(Timestamp fechaFin) {\r\n        this.fechaFin = fechaFin;\r\n    }\r\n} ",
                  "lecciones.java": "package com.sena_proyecto_car_2025.model;\r\n\r\nimport jakarta.persistence.Entity;\r\nimport jakarta.persistence.GeneratedValue;\r\nimport jakarta.persistence.GenerationType;\r\nimport jakarta.persistence.Id;\r\nimport jakarta.persistence.Column;\r\nimport jakarta.persistence.ManyToOne;\r\nimport jakarta.persistence.JoinColumn;\r\n\r\n@Entity(name = \"lecciones\")\r\npublic class lecciones {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private int id_leccion;\r\n\r\n    @Column(name = \"nombre_leccion\", length = 150)\r\n    private String nombre_leccion;\r\n\r\n    @Column(name = \"descripcion\")\r\n    private String descripcion;\r\n\r\n    @Column(name = \"ruta_leccion\")\r\n    private String ruta_leccion;\r\n\r\n    @ManyToOne\r\n    @JoinColumn(name = \"id_curso\")\r\n    private Cursos curso;\r\n\r\n    // Constructor vacío\r\n    public lecciones() {}\r\n\r\n    // Constructor con parámetros\r\n    public lecciones(int id_leccion, String nombre_leccion, String descripcion, String ruta_leccion, Cursos curso) {\r\n        this.id_leccion = id_leccion;\r\n        this.nombre_leccion = nombre_leccion;\r\n        this.descripcion = descripcion;\r\n        this.ruta_leccion = ruta_leccion;\r\n        this.curso = curso;\r\n    }\r\n\r\n    // Getters y Setters\r\n    public int getId_leccion() {\r\n        return id_leccion;\r\n    }\r\n\r\n    public void setId_leccion(int id_leccion) {\r\n        this.id_leccion = id_leccion;\r\n    }\r\n\r\n    public String getNombre_leccion() {\r\n        return nombre_leccion;\r\n    }\r\n\r\n    public void setNombre_leccion(String nombre_leccion) {\r\n        this.nombre_leccion = nombre_leccion;\r\n    }\r\n\r\n    public String getDescripcion() {\r\n        return descripcion;\r\n    }\r\n\r\n    public void setDescripcion(String descripcion) {\r\n        this.descripcion = descripcion;\r\n    }\r\n\r\n    public String getRuta_leccion() {\r\n        return ruta_leccion;\r\n    }\r\n\r\n    public void setRuta_leccion(String ruta_leccion) {\r\n        this.ruta_leccion = ruta_leccion;\r\n    }\r\n\r\n    public Cursos getCurso() {\r\n        return curso;\r\n    }\r\n\r\n    public void setCurso(Cursos curso) {\r\n        this.curso = curso;\r\n    }\r\n}\r\n",
                  "Table.java": "package com.sena_proyecto_car_2025.model;\r\n\r\npublic @interface Table {\r\n\r\n}\r\n"
                },
                "repository": {
                  "IAprendiz.java": "package com.sena_proyecto_car_2025.repository;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport com.sena_proyecto_car_2025.model.Aprendiz;\r\nimport java.util.List;\r\n\r\npublic interface IAprendiz extends JpaRepository<Aprendiz, Integer> {\r\n    //from apr\r\n    //metodo para buscar por id\r\n    \r\n    // Buscar por número de documento\r\n    @Query(\"SELECT a FROM aprendiz a WHERE a.numeroDocumento = :documento\")\r\n    Aprendiz findByNumeroDocumento(@Param(\"documento\") long documento);\r\n    \r\n    // Buscar por correo\r\n    @Query(\"SELECT a FROM aprendiz a WHERE a.correo = :correo\")\r\n    Aprendiz findByCorreo(@Param(\"correo\") String correo);\r\n    \r\n    // Buscar por tipo de usuario\r\n    @Query(\"SELECT a FROM aprendiz a WHERE a.tipoUsuario = :tipo\")\r\n    List<Aprendiz> findByTipoUsuario(@Param(\"tipo\") boolean tipo);\r\n    \r\n    // Buscar por nombre que contenga\r\n    @Query(\"SELECT a FROM aprendiz a WHERE LOWER(a.nombre) LIKE LOWER(CONCAT('%', :nombre, '%'))\")\r\n    List<Aprendiz> findByNombreContaining(@Param(\"nombre\") String nombre);\r\n}\r\n",
                  "IAprendizCurso.java": "package com.sena_proyecto_car_2025.repository;\r\n\r\nimport org.springframework.data.repository.CrudRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport com.sena_proyecto_car_2025.model.aprendiz_curso;\r\nimport com.sena_proyecto_car_2025.model.Aprendiz;\r\nimport com.sena_proyecto_car_2025.model.Cursos;\r\nimport java.util.List;\r\nimport java.sql.Timestamp;\r\nimport org.springframework.lang.NonNull;\r\n\r\npublic interface IAprendizCurso extends CrudRepository<aprendiz_curso, Long> {\r\n    \r\n    // Guardar entidad\r\n    @NonNull\r\n    @Override\r\n    <S extends aprendiz_curso> S save(@NonNull S entity);\r\n    \r\n    // Buscar por aprendiz\r\n    @Query(\"SELECT ac FROM aprendiz_curso ac WHERE ac.aprendiz = :aprendiz\")\r\n    List<aprendiz_curso> findByAprendiz(@Param(\"aprendiz\") Aprendiz aprendiz);\r\n    \r\n    // Buscar por curso\r\n    @Query(\"SELECT ac FROM aprendiz_curso ac WHERE ac.curso = :curso\")\r\n    List<aprendiz_curso> findByCurso(@Param(\"curso\") Cursos curso);\r\n    \r\n    // Buscar por rango de fechas de inscripción\r\n    @Query(\"SELECT ac FROM aprendiz_curso ac WHERE ac.fechaInscripcion BETWEEN :fechaInicio AND :fechaFin\")\r\n    List<aprendiz_curso> findByFechaInscripcionBetween(\r\n        @Param(\"fechaInicio\") Timestamp fechaInicio, \r\n        @Param(\"fechaFin\") Timestamp fechaFin\r\n    );\r\n    \r\n    // Buscar inscripciones activas (basado en la fecha de fin del curso)\r\n    @Query(\"SELECT ac FROM aprendiz_curso ac WHERE ac.curso.fechaFin > :fechaActual\")\r\n    List<aprendiz_curso> findActiveEnrollments(@Param(\"fechaActual\") Timestamp fechaActual);\r\n}",
                  "ICertificados.java": "package com.sena_proyecto_car_2025.repository;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport com.sena_proyecto_car_2025.model.Certificados;\r\nimport com.sena_proyecto_car_2025.model.Aprendiz;\r\nimport com.sena_proyecto_car_2025.model.lecciones;\r\nimport java.util.List;\r\nimport java.sql.Timestamp;\r\n\r\npublic interface ICertificados extends JpaRepository<Certificados, Integer> {\r\n    \r\n    // Buscar por nombre de certificado\r\n    @Query(\"SELECT c FROM certificados c WHERE LOWER(c.nombreCertificado) LIKE LOWER(CONCAT('%', :nombre, '%'))\")\r\n    List<Certificados> findByNombreCertificadoContaining(@Param(\"nombre\") String nombre);\r\n    \r\n    // Buscar por número de documento del certificado\r\n    @Query(\"SELECT c FROM certificados c WHERE c.numeroDocumentoCertificado = :numero\")\r\n    Certificados findByNumeroDocumentoCertificado(@Param(\"numero\") int numero);\r\n    \r\n    // Buscar por aprendiz\r\n    @Query(\"SELECT c FROM certificados c WHERE c.aprendiz = :aprendiz\")\r\n    List<Certificados> findByAprendiz(@Param(\"aprendiz\") Aprendiz aprendiz);\r\n    \r\n    // Buscar por lección\r\n    @Query(\"SELECT c FROM certificados c WHERE c.lecciones = :leccion\")\r\n    List<Certificados> findByLeccion(@Param(\"leccion\") lecciones leccion);\r\n    \r\n    // Buscar por rango de fechas de finalización\r\n    @Query(\"SELECT c FROM certificados c WHERE c.fechaFin BETWEEN :fechaInicio AND :fechaFin\")\r\n    List<Certificados> findByFechaFinBetween(@Param(\"fechaInicio\") Timestamp fechaInicio, @Param(\"fechaFin\") Timestamp fechaFin);\r\n} ",
                  "ICursos.java": "package com.sena_proyecto_car_2025.repository;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport com.sena_proyecto_car_2025.model.Cursos;\r\nimport java.util.List;\r\nimport java.sql.Timestamp;\r\n\r\npublic interface ICursos extends JpaRepository<Cursos, Integer> {\r\n    \r\n    // Buscar por código de ficha\r\n    @Query(\"SELECT c FROM cursos c WHERE c.codigoFicha = :codigo\")\r\n    Cursos findByCodigoFicha(@Param(\"codigo\") int codigo);\r\n    \r\n    // Buscar por nombre de programa\r\n    @Query(\"SELECT c FROM cursos c WHERE LOWER(c.nombrePrograma) LIKE LOWER(CONCAT('%', :nombre, '%'))\")\r\n    List<Cursos> findByNombreProgramaContaining(@Param(\"nombre\") String nombre);\r\n    \r\n    // Buscar cursos activos (fecha fin mayor a la actual)\r\n    @Query(\"SELECT c FROM cursos c WHERE c.fechaFin > :fechaActual\")\r\n    List<Cursos> findActiveCourses(@Param(\"fechaActual\") Timestamp fechaActual);\r\n    \r\n    // Buscar cursos por rango de fechas\r\n    @Query(\"SELECT c FROM cursos c WHERE c.fechaInicio >= :fechaInicio AND c.fechaFin <= :fechaFin\")\r\n    List<Cursos> findByDateRange(@Param(\"fechaInicio\") Timestamp fechaInicio, @Param(\"fechaFin\") Timestamp fechaFin);\r\n} ",
                  "ILecciones.java": "package com.sena_proyecto_car_2025.repository;\r\n\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.data.jpa.repository.Query;\r\nimport org.springframework.data.repository.query.Param;\r\n\r\nimport com.sena_proyecto_car_2025.model.lecciones;\r\nimport com.sena_proyecto_car_2025.model.Cursos;\r\nimport java.util.List;\r\n\r\npublic interface ILecciones extends JpaRepository<lecciones, Integer> {\r\n    \r\n    // Buscar por nombre de lección\r\n    @Query(\"SELECT l FROM lecciones l WHERE LOWER(l.nombre_leccion) LIKE LOWER(CONCAT('%', :nombre, '%'))\")\r\n    List<lecciones> findByNombreLeccionContaining(@Param(\"nombre\") String nombre);\r\n    \r\n    // Buscar por curso\r\n    @Query(\"SELECT l FROM lecciones l WHERE l.curso = :curso\")\r\n    List<lecciones> findByCurso(@Param(\"curso\") Cursos curso);\r\n    \r\n    // Buscar por descripción que contenga\r\n    @Query(\"SELECT l FROM lecciones l WHERE LOWER(l.descripcion) LIKE LOWER(CONCAT('%', :descripcion, '%'))\")\r\n    List<lecciones> findByDescripcionContaining(@Param(\"descripcion\") String descripcion);\r\n    \r\n    // Buscar por ruta de lección\r\n    @Query(\"SELECT l FROM lecciones l WHERE l.ruta_leccion = :ruta\")\r\n    lecciones findByRutaLeccion(@Param(\"ruta\") String ruta);\r\n} "
                },
                "service": {
                  "AprendizCursoService.java": "package com.sena_proyecto_car_2025.service;\r\n//se importan las librerias necesarias el @Autowired para inyectar el repositorio\r\n//SERVICE para indicar que es un servicio\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.sena_proyecto_car_2025.model.aprendiz_curso;\r\nimport com.sena_proyecto_car_2025.repository.IAprendizCurso;\r\n\r\n//se inicia el @Service para indicar que es un servicio\r\n@Service\r\npublic class AprendizCursoService {\r\n\r\n    //se inyecta el repositorio\r\n    @Autowired\r\n    private IAprendizCurso aprendiz_cursoRepository;\r\n    /*\r\n     * crud\r\n     * create\r\n     * read list completo\r\n     * road by id\r\n     * update\r\n     * delete\r\n    */\r\n    public boolean save(aprendiz_curso aprendizCurso) {\r\n        aprendiz_cursoRepository.save(aprendizCurso);\r\n        return true;\r\n    }\r\n\r\n    // Obtener todos los registros\r\n    public Iterable<aprendiz_curso> findAll() {\r\n        return aprendiz_cursoRepository.findAll();\r\n    }\r\n\r\n    // Obtener un registro por ID\r\n    public aprendiz_curso findById(Long id) {\r\n        return aprendiz_cursoRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    // Actualizar un registro\r\n    public boolean update(aprendiz_curso aprendizCurso) {\r\n        aprendiz_cursoRepository.save(aprendizCurso);\r\n        return true;\r\n    }\r\n\r\n    // Eliminar un registro\r\n    public boolean delete(Long id) {\r\n        aprendiz_cursoRepository.deleteById(id);\r\n        return true;\r\n    }\r\n}",
                  "AprendizService.java": "package com.sena_proyecto_car_2025.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\nimport com.sena_proyecto_car_2025.model.Aprendiz;\r\nimport com.sena_proyecto_car_2025.repository.IAprendiz;\r\n\r\n@Service\r\npublic class AprendizService{\r\n\r\n    //se inyecta el repositorio\r\n    @Autowired\r\n    private IAprendiz IAprendizRepository;\r\n    /*\r\n     * crud\r\n     * create  \r\n     * read list completo\r\n     * road by id\r\n     * update\r\n     * delete\r\n    */\r\n    public boolean save(Aprendiz aprendiz) {\r\n        IAprendizRepository.save(aprendiz);\r\n        return true;\r\n    }\r\n\r\n    // Obtener todos los registros\r\n    public Iterable<Aprendiz> findAll() {\r\n        return IAprendizRepository.findAll();\r\n    }\r\n\r\n    // Obtener un registro por ID\r\n    public Aprendiz findById(Integer id) {\r\n        return IAprendizRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    // Actualizar un registro\r\n    public boolean update(Aprendiz aprendiz) {\r\n        IAprendizRepository.save(aprendiz);\r\n        return true;\r\n    }\r\n\r\n    // Eliminar un registro\r\n    public boolean delete(Integer id) {\r\n        IAprendizRepository.deleteById(id);\r\n        return true;\r\n    }\r\n}",
                  "CertificadosService.java": "package com.sena_proyecto_car_2025.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.sena_proyecto_car_2025.model.Certificados;\r\nimport com.sena_proyecto_car_2025.repository.ICertificados;\r\n\r\n@Service\r\npublic class CertificadosService {\r\n\r\n    @Autowired\r\n    private ICertificados certificadosRepository;\r\n\r\n    public boolean save(Certificados certificado) {\r\n        certificadosRepository.save(certificado);\r\n        return true;\r\n    }\r\n\r\n    // Obtener todos los registros\r\n    public Iterable<Certificados> findAll() {\r\n        return certificadosRepository.findAll();\r\n    }\r\n\r\n    // Obtener un registro por ID\r\n    public Certificados findById(Integer id) {\r\n        return certificadosRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    // Actualizar un registro\r\n    public boolean update(Certificados certificado) {\r\n        certificadosRepository.save(certificado);\r\n        return true;\r\n    }\r\n\r\n    // Eliminar un registro\r\n    public boolean delete(Integer id) {\r\n        certificadosRepository.deleteById(id);\r\n        return true;\r\n    }\r\n} ",
                  "CursosService.java": "package com.sena_proyecto_car_2025.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.sena_proyecto_car_2025.model.Cursos;\r\nimport com.sena_proyecto_car_2025.repository.ICursos;\r\n\r\n@Service\r\npublic class CursosService {\r\n\r\n    @Autowired\r\n    private ICursos cursosRepository;\r\n\r\n    public boolean save(Cursos curso) {\r\n        cursosRepository.save(curso);\r\n        return true;\r\n    }\r\n\r\n    // Obtener todos los registros\r\n    public Iterable<Cursos> findAll() {\r\n        return cursosRepository.findAll();\r\n    }\r\n\r\n    // Obtener un registro por ID\r\n    public Cursos findById(Integer id) {\r\n        return cursosRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    // Actualizar un registro\r\n    public boolean update(Cursos curso) {\r\n        cursosRepository.save(curso);\r\n        return true;\r\n    }\r\n\r\n    // Eliminar un registro\r\n    public boolean delete(Integer id) {\r\n        cursosRepository.deleteById(id);\r\n        return true;\r\n    }\r\n} ",
                  "LeccionesService.java": "package com.sena_proyecto_car_2025.service;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.sena_proyecto_car_2025.model.lecciones;\r\nimport com.sena_proyecto_car_2025.repository.ILecciones;\r\n\r\n@Service\r\npublic class LeccionesService {\r\n\r\n    @Autowired\r\n    private ILecciones leccionesRepository;\r\n\r\n    public boolean save(lecciones leccion) {\r\n        leccionesRepository.save(leccion);\r\n        return true;\r\n    }\r\n\r\n    // Obtener todos los registros\r\n    public Iterable<lecciones> findAll() {\r\n        return leccionesRepository.findAll();\r\n    }\r\n\r\n    // Obtener un registro por ID\r\n    public lecciones findById(Integer id) {\r\n        return leccionesRepository.findById(id).orElse(null);\r\n    }\r\n\r\n    // Actualizar un registro\r\n    public boolean update(lecciones leccion) {\r\n        leccionesRepository.save(leccion);\r\n        return true;\r\n    }\r\n\r\n    // Eliminar un registro\r\n    public boolean delete(Integer id) {\r\n        leccionesRepository.deleteById(id);\r\n        return true;\r\n    }\r\n} "
                },
                "SprintBootApplication.java": "package com.sena_proyecto_car_2025;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\n\r\n@SpringBootApplication\r\npublic class SprintBootApplication {\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(SprintBootApplication.class, args);\r\n    }\r\n}\r\n"
              }
            }
          },
          "resources": {
            "application.properties": "spring.application.name=sprint-boot\r\n# URL del servidor y base de datos\r\nspring.datasource.url=jdbc:mariadb://localhost:3306/carlos_julio\r\n# Usuario de la base de datos\r\nspring.datasource.username=root\r\n# Contraseña del usuario\r\nspring.datasource.password=123456\r\n# Driver de la base de datos\r\nspring.datasource.driver-class-name=org.mariadb.jdbc.Driver\r\n# Dialecto de Hibernate para MariaDB\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect\r\n# Tipo de SQL\r\nspring.jpa.hibernate.ddl-auto=create-drop\r\n# Mostrar las consultas SQL\r\nspring.jpa.show-sql=true\r\n\r\n\r\n\r\n"
          }
        },
        "test": {
          "java": {
            "com": {
              "sena_proyecto_car_2025": {
                "sprint": {
                  "boot": {
                    "SprintBootApplicationTests.java": "package com.sena_proyecto_car_2025.sprint.boot;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.boot.test.context.SpringBootTest;\r\n\r\n@SpringBootTest\r\nclass SprintBootApplicationTests {\r\n\r\n\t@Test\r\n\tvoid contextLoads() {\r\n\t}\r\n\r\n}\r\n"
                  }
                }
              }
            }
          }
        }
      },
      "target": {
        "classes": {
          "application.properties": "spring.application.name=sprint-boot\r\n# URL del servidor y base de datos\r\nspring.datasource.url=jdbc:mariadb://localhost:3306/carlos_julio\r\n# Usuario de la base de datos\r\nspring.datasource.username=root\r\n# Contraseña del usuario\r\nspring.datasource.password=123456\r\n# Driver de la base de datos\r\nspring.datasource.driver-class-name=org.mariadb.jdbc.Driver\r\n# Dialecto de Hibernate para MariaDB\r\nspring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect\r\n# Tipo de SQL\r\nspring.jpa.hibernate.ddl-auto=create-drop\r\n# Mostrar las consultas SQL\r\nspring.jpa.show-sql=true\r\n\r\n\r\n\r\n",
          "com": {
            "sena_proyecto_car_2025": {
              "controller": {
                "aprendiz_controller.class": "(binary)",
                "aprendiz_curso_controller.class": "(binary)",
                "certificados_controller.class": "(binary)",
                "cursos_controller.class": "(binary)",
                "lecciones_controller.class": "(binary)"
              },
              "Dto": {
                "AprendizCursoDTO.class": "(binary)",
                "AprendizDTO.class": "(binary)",
                "CertificadosDTO.class": "(binary)",
                "CursosDTO.class": "(binary)",
                "GenericResponseDTO.class": "(binary)",
                "LeccionesDTO.class": "(binary)",
                "responseDTO.class": "(binary)"
              },
              "model": {
                "aprendiz_curso.class": "(binary)",
                "Aprendiz.class": "(binary)",
                "Certificados.class": "(binary)",
                "Cursos.class": "(binary)",
                "lecciones.class": "(binary)",
                "Table.class": "(binary)"
              },
              "repository": {
                "IAprendiz.class": "(binary)",
                "IAprendizCurso.class": "(binary)",
                "ICertificados.class": "(binary)",
                "ICursos.class": "(binary)",
                "ILecciones.class": "(binary)"
              },
              "service": {
                "AprendizCursoService.class": "(binary)",
                "AprendizService.class": "(binary)",
                "CertificadosService.class": "(binary)",
                "CursosService.class": "(binary)",
                "LeccionesService.class": "(binary)"
              },
              "SprintBootApplication.class": "(binary)"
            }
          }
        },
        "test-classes": {
          "com": {
            "sena_proyecto_car_2025": {
              "sprint": {
                "boot": {
                  "SprintBootApplicationTests.class": "(binary)"
                }
              }
            }
          }
        }
      }
    }
  }
}